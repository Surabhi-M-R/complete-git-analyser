<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="icon" href="data:,">
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <div class="container">
        <h1>GitHub Repository Analyzer</h1>
        
        <form id="repoForm">
            <div class="form-group">
                <label for="repoUrl">Git Repository URL:</label>
                <input type="text" id="repoUrl" name="repoUrl" placeholder="https://github.com/username/repository.git" required>
            </div>
            <button type="submit">Analyze Repository</button>
        </form>
        
        <div id="result"></div>
    </div>

    <script>
        // Add error handling for page load
        window.addEventListener('load', function() {
            console.log('Page loaded successfully');
        });

        window.addEventListener('error', function(e) {
            console.error('Page error:', e.error);
        });

        document.getElementById('repoForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const repoUrl = document.getElementById('repoUrl').value;
            const resultDiv = document.getElementById('result');
            
            console.log('Submitting form with URL:', repoUrl);
            
            resultDiv.innerHTML = `
                <div class="loading">
                    <div class="loading-spinner"></div>
                    <p>Analyzing repository...</p>
                </div>
            `;
            
            try {
                const response = await fetch('/analyze', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ repoUrl })
                });
                
                console.log('Response status:', response.status);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                console.log('Analysis result:', result);
                
                if (result.success) {
                    // Count issues by type
                    const criticalIssues = result.issues.filter(i => i.severity === 'high').length;
                    const warnings = result.issues.filter(i => i.severity === 'medium').length;
                    const suggestions = result.issues.filter(i => i.severity === 'low').length;
                    
                    resultDiv.innerHTML = `
                        <div class="analysis-summary">
                            <div class="summary-card">
                                <h3>Project Type</h3>
                                <div class="value">${result.analysis.projectType}</div>
                                <div class="label">Detected</div>
                            </div>
                            <div class="summary-card">
                                <h3>Critical Issues</h3>
                                <div class="value" style="color: ${criticalIssues > 0 ? '#dc3545' : '#28a745'}">${criticalIssues}</div>
                                <div class="label">Needs immediate attention</div>
                            </div>
                            <div class="summary-card">
                                <h3>Warnings</h3>
                                <div class="value" style="color: ${warnings > 0 ? '#ffc107' : '#6c757d'}">${warnings}</div>
                                <div class="label">Should be addressed</div>
                            </div>
                            <div class="summary-card">
                                <h3>Suggestions</h3>
                                <div class="value">${suggestions}</div>
                                <div class="label">Improvements</div>
                            </div>
                        </div>
                        
                        <div class="analysis-section">
                            <h3>Issues Found</h3>
                            ${result.issues.length > 0 ? `
                                <ul class="issues-list">
                                    ${result.issues.map(issue => `
                                        <li class="issue-item issue-${issue.type}">
                                            <div class="issue-header">
                                                <h4 class="issue-title">${issue.message}</h4>
                                                <span class="issue-severity severity-${issue.severity}">${issue.severity}</span>
                                            </div>
                                            <p>${issue.description}</p>
                                            <p><strong>Recommendation:</strong> ${issue.recommendation}</p>
                                        </li>
                                    `).join('')}
                                </ul>
                            ` : '<p>No issues found. Great job!</p>'}
                        </div>
                        
                        <div class="analysis-section">
                            <h3>Dockerfile</h3>
                            <div class="file-section">
                                <div class="file-header">
                                    <span>Dockerfile</span>
                                    <span class="${result.generated.dockerfile ? 'generated-badge' : 'existing-badge'}">
                                        ${result.generated.dockerfile ? 'GENERATED' : 'EXISTING'}
                                    </span>
                                </div>
                                <div class="file-content">
                                    <pre>${escapeHtml(result.files.dockerfile)}</pre>
                                </div>
                            </div>
                        </div>
                        
                        <div class="analysis-section">
                            <h3>Docker Compose</h3>
                            <div class="file-section">
                                <div class="file-header">
                                    <span>docker-compose.yml</span>
                                    <span class="${result.generated.compose ? 'generated-badge' : 'existing-badge'}">
                                        ${result.generated.compose ? 'GENERATED' : 'EXISTING'}
                                    </span>
                                </div>
                                <div class="file-content">
                                    <pre>${escapeHtml(result.files.compose)}</pre>
                                </div>
                            </div>
                        </div>
                        
                        <div class="analysis-section">
                            <h3>README</h3>
                            <div class="file-section">
                                <div class="file-header">
                                    <span>README.md</span>
                                    <span class="${result.generated.readme ? 'generated-badge' : 'existing-badge'}">
                                        ${result.generated.readme ? 'GENERATED' : 'EXISTING'}
                                    </span>
                                </div>
                                <div class="file-content">
                                    <pre>${escapeHtml(result.files.readme)}</pre>
                                </div>
                            </div>
                        </div>
                    `;
                } else {
                    resultDiv.innerHTML = `
                        <div class="error">
                            <h3>Error</h3>
                            <p>${result.message}</p>
                            ${result.error ? `<p>Error details: ${result.error}</p>` : ''}
                        </div>
                    `;
                }
            } catch (error) {
                resultDiv.innerHTML = `
                    <div class="error">
                        <h3>Error</h3>
                        <p>${error.message}</p>
                    </div>
                `;
            }
        });
        
        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }
    </script>
</body>
</html>