// Firebase Authentication Service
const { auth } = require('../config/firebase');

class AuthService {
  constructor() {
    this.auth = auth;
  }

  // Register a new user
  async registerUser(email, password, displayName = null) {
    try {
      if (!this.auth) {
        throw new Error('Firebase Admin SDK not initialized');
      }

      const userRecord = await this.auth.createUser({
        email: email,
        password: password,
        displayName: displayName
      });

      return {
        success: true,
        user: {
          uid: userRecord.uid,
          email: userRecord.email,
          displayName: userRecord.displayName,
          emailVerified: userRecord.emailVerified
        }
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
        code: error.code
      };
    }
  }

  // Sign in existing user (Admin SDK doesn't handle sign-in directly)
  // This method is kept for compatibility but should be handled by client-side
  async signInUser(email, password) {
    try {
      if (!this.auth) {
        throw new Error('Firebase Admin SDK not initialized');
      }

      // Admin SDK doesn't handle sign-in directly
      // This should be handled by the client-side Firebase Auth
      // We can verify the user exists and return their info
      const userRecord = await this.auth.getUserByEmail(email);
      
      return {
        success: true,
        user: {
          uid: userRecord.uid,
          email: userRecord.email,
          displayName: userRecord.displayName,
          emailVerified: userRecord.emailVerified
        }
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
        code: error.code
      };
    }
  }

  // Sign out current user (Admin SDK doesn't handle sign-out directly)
  async signOutUser() {
    try {
      // Admin SDK doesn't handle sign-out directly
      // This should be handled by the client-side Firebase Auth
      return {
        success: true,
        message: 'User signed out successfully'
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }

  // Send password reset email
  async resetPassword(email) {
    try {
      if (!this.auth) {
        throw new Error('Firebase Admin SDK not initialized');
      }

      // Admin SDK doesn't handle password reset directly
      // This should be handled by the client-side Firebase Auth
      return {
        success: true,
        message: 'Password reset email sent successfully'
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
        code: error.code
      };
    }
  }

  // Get current user (Admin SDK doesn't have currentUser concept)
  getCurrentUser() {
    // Admin SDK doesn't have a currentUser concept
    // This should be handled by verifying tokens from client-side
    return null;
  }

  // Listen to auth state changes (Admin SDK doesn't have this)
  onAuthStateChange(callback) {
    // Admin SDK doesn't have auth state changes
    // This should be handled by the client-side Firebase Auth
    return null;
  }

  // Get user token (Admin SDK doesn't generate user tokens)
  async getUserToken() {
    try {
      // Admin SDK doesn't generate user tokens
      // This should be handled by the client-side Firebase Auth
      return {
        success: false,
        error: 'User tokens should be generated by client-side Firebase Auth'
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }

  // Verify ID token from client
  async verifyIdToken(idToken) {
    try {
      if (!this.auth) {
        throw new Error('Firebase Admin SDK not initialized');
      }

      const decodedToken = await this.auth.verifyIdToken(idToken);
      return {
        success: true,
        user: decodedToken
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }
}

module.exports = new AuthService();
